<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dr.Ink的小站</title>
    <link>https://orilx.gitee.io/post/</link>
    <description>Recent content in Posts on Dr.Ink的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 26 May 2021 00:51:18 +0000</lastBuildDate><atom:link href="https://orilx.gitee.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git的配置</title>
      <link>https://orilx.gitee.io/p/2021/05/git%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 26 May 2021 00:51:18 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/05/git%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <description>其余部分以后再补全
先安装好git和Windows Terminal
为啥用Windows Terminal？
因为好看
设置用户名和邮箱 git config --global user.name &#39;名称&#39;git config --global user.email &#39;邮箱地址&#39; 生成密钥 ssh-keygen -t rsa -C &#39;邮箱地址&#39; 直接回车三次就行
配置 打开用户文件夹/.ssh中的id-rsa.pub文件，复制密钥粘贴到GitHub账户Account settings -&amp;gt; SSH and GPG keys -&amp;gt; SSH keys 中
克隆项目/托管本地项目 克隆 直接在要保存项目的文件夹中右键启动Windows Terminal，键入命令
git clone &amp;lt;项目ssh地址&amp;gt;托管本地项目 在项目文件夹下打开Windows Terminal，键入下面的命令进行初始化
git init完成后项目文件夹中会出现.git的隐藏文件夹
在github/gitee中新建一个仓库，复制下ssh地址
然后在命令行中输入
git remote add orign &amp;lt;项目ssh地址&amp;gt;或手动修改在.git文件夹下的config文件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #参考 [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote &amp;#34;gitee&amp;#34;] url = git@gitee.</description>
    </item>
    
    <item>
      <title>Hugo博客配置</title>
      <link>https://orilx.gitee.io/p/2021/05/hugo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 26 May 2021 00:47:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/05/hugo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</guid>
      <description>其余部分以后再补全
安装scoop Scoop是Windows的命令行安装程序，是一个强大的包管理工具
在powershell中运行命令
1  Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&amp;#39;https://get.scoop.sh&amp;#39;)   ps可能会报错
 PowerShell requires an execution policy in [Unrestricted, RemoteSigned, ByPass] to run Scoop. For example, to set the execution policy to &amp;lsquo;RemoteSigned&amp;rsquo; please run : &amp;lsquo;Set-ExecutionPolicy RemoteSigned -scope CurrentUser&amp;rsquo;
 执行
1  Set-ExecutionPolicy RemoteSigned -scope CurrentUser   之后再执行上面的命令即可
安装Hugo 执行
1 2 3  scoop install hugo #或 scoop install hugo-extended   即可
安装主题 我使用的是jimmycaidalao制作的Stack主题</description>
    </item>
    
    <item>
      <title>Terminal美化配置文件</title>
      <link>https://orilx.gitee.io/p/2021/04/terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 29 Apr 2021 23:42:51 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/04/terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  &amp;#34;profiles&amp;#34;: { &amp;#34;defaults&amp;#34;: { &amp;#34;acrylicOpacity&amp;#34;: 0.1, //背景透明度(0-1) &amp;#34;useAcrylic&amp;#34;: true, // 启用毛玻璃 &amp;#34;backgroundImage&amp;#34;: &amp;#34;D:\\0.0.jpg&amp;#34;, //背景图片 &amp;#34;backgroundImageOpacity&amp;#34;: 0.4, //图片透明度（0-1） &amp;#34;fontFace&amp;#34;: &amp;#34;Sarasa Term SC&amp;#34;, //字体 &amp;#34;fontSize&amp;#34;: 12, //文字大小 &amp;#34;fontWeight&amp;#34;: &amp;#34;bold&amp;#34;, //文字宽度，可设置加粗 &amp;#34;colorScheme&amp;#34;: &amp;#34;One Half Dark&amp;#34;, //主题名字 &amp;#34;antialiasingMode&amp;#34;: &amp;#34;cleartype&amp;#34; //消除文字锯齿 }, }   </description>
    </item>
    
    <item>
      <title>方法的动态参数列表</title>
      <link>https://orilx.gitee.io/p/2021/03/%E6%96%B9%E6%B3%95%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/</link>
      <pubDate>Mon, 01 Mar 2021 22:50:31 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/03/%E6%96%B9%E6%B3%95%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/</guid>
      <description>动态参数(可变参数) 动态参数在方法内部,可以当作数组处理
在调用方法的时候,可以按如下三种方式进行调用:
 接收数组 接收一个数据 接收n多个数据  以下面的代码串为例
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class ParameterTest { public static void main(String[] args) { String pnames[]={&amp;#34;Steve&amp;#34;,&amp;#34;Amy&amp;#34;,&amp;#34;Alex&amp;#34;}; ParamaterTest.Select(pnames); //方式1  ParamaterTest.Select(&amp;#34;Steve&amp;#34;); //方式2  ParamaterTest.Select(&amp;#34;Steve&amp;#34;,&amp;#34;Amy&amp;#34;,&amp;#34;Alex&amp;#34;); //方式3  } public static void Select(String...pnames) { for(String name:pnames) { System.out.println(&amp;#34;Select &amp;#34;+name); } } }   分析 {% raw %}</description>
    </item>
    
    <item>
      <title>Java中的异常处理</title>
      <link>https://orilx.gitee.io/p/2021/02/java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/02/java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>程序设计中异常(Exception)与错误(Error)的区别  错误：语法层面的问题，由于语法应用不当或是编写不当导致代码无法编译运行 异常：由于逻辑设计上的思维错误，导致代码编译成功之后到运行期间，运行结果与设计意图不一致  以下面这段代码为例
1 2 3 4 5 6 7 8 9 10 11 12  public static void main(String[] args) { Maths.div(); } private static void div() { int x=10; int y=0; int z=x/y; System.out.println(&amp;#34;z=&amp;#34;+z); }   上述代码在运行的时候会报错
Exception in thread &amp;ldquo;main&amp;rdquo; java.lang.ArithmeticException: / by zero
at com.openedu.Maths.div(Maths.java:146)
at com.openedu.Maths.main(Maths.java:7)下面我们用新的方法重写这段代码
带有完整的异常处理的方法 先上代码
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  private static void div2() { try { int x=10; int y=0; int z=x/y; System.</description>
    </item>
    
    <item>
      <title>Java面向对象笔记</title>
      <link>https://orilx.gitee.io/p/2021/02/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 20 Feb 2021 15:06:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/02/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0/</guid>
      <description>基本世界观 面向对象认为：客观世界就是基于一横一纵的两种关系构成的平面世界。
纵向演进 同一物种，在繁衍生息过程中，不断壮大分裂，形成不同的种群，体现的就是物种的生生不息的纵向演化过程。
每一次演进都是对已有物种重新分类的过程，比如生物学上的分类方式界门纲目科属种等，都是事物发展细分过程的体系。
横向联系 同一物种的不同种群，或不同物种之间的联合和竞争
 联合关系：A调用B 竞争关系：当A类存在后，经过实践证明，应用在某些环境下不是很好或存在隐患，于是开发新版本的替代方案，在A的不良应用环境中，取代之。  构成纵向演进和横向联系的主体就是对象。
对象：客观世界的主体 对象也叫实体。
在面向对象看来，客观世界的最小构成单元就是对象。一切事物都可以看作是对象，比如：一本书、一个人、一滴水、一个妖怪……
简而言之，实体即对象。
实体也是由两部分构成的，一个叫状态，一个叫行为，并且可以通过行为可以影响状态的改变。这就是面向对象编程的第一思想根基。
即：行为影响状态，状态不可以自我更新。
行为影响状态改变的三重含义  一个实体自身的行为，可以影响自身状态的改变，比如吃饭的行为影响饥饿状态的改变。 一个对象的行为可以影响其他对象状态的改变，比如老师讲课影响学生们清醒状态的改变。 状态的改变依赖于行为的发生，没有行为发生，状态不变，即状态不可以自我更新。  语法上的问题 没有对象级文件的原因 根据面向对象的理论体系，对象才是核心，但是，到目前为止，我们创建的都是类。
在语法层面上就没有对象这一级的文件。比如在Eclipse中新建文件的选项中，就没有对象这一语法单元。原因是什么呢？
对象的数量级，理论上是无穷的。针对无穷数量的东西，无法以可控的手段落实到语法单元层面，也无法维护。
基于上述问题，一般采用物以类聚的原则，以类别为单位管理同类事物。这就是以类为基础语法单元的原因。
类 类是面向对象的基本概念，是具有相同特征的对象的集合。
概念解读 从任意主观角度去看，只要诸多对象存在相同的特征，就可以放到一起，作为一类事物进行统一管理。它体现的就是物以类聚的概念。
类是一个集合的概念，表示的是群体特征。
对象是这一类事物中的一个个体，是一类事物的一个实例。
怎么设计类 思维的原点 任何思维模式都会有一个起点，由此开始向外衍射，逐渐形成理论体系。而最恰当的思维原点，就是事物的本源。从源头出发思考问题，往往能理清事物的发展脉络，更容易构建体系化的理论。即：一切思维，起始于物质本源，宜以便抓住源头，才能思考问题。
面向对象思维原点 既然面向对象认为，客观世界最小单元是对象，因此一切理论的分析，都应该从对象开始。设计类自然也不例外，必须建立在对对象的分析这一基础上。
设计的实现 面向对象程序设计 所谓的面向对象程序设计，就是分析客观实体的状态和行为抽象共性，形成类。
 通过封装定义并区分事物的类别。 通过继承描述事物的纵向演进，描述类别细分。 通过多态描述基于物竞天择的物种多样性。 通过类（或对象）之间的调用，描述事物之间的横向联系。  类与类型 在Java中，定义一个类，就相当于定义了一种新的数据类型。对象可以看作是基于自定义类型创造的标准件。
方法剖析 方法是什么 方法：对应事物的行为，封装了类对某一事件的处理过程。
方法剖析的范围：
 参数分析 返回值分析 重载分析  三驾马车 方法对应行为，事物的行为可能依赖于外界信息，参数用以收集为执行该行为所需要的外部信息；一个行为执行完毕以后，可能需要将执行结果通知给其他事物，这个要靠返回值来完成。
简而言之：参数用以将数据带入方法，返回值用以将数据带出方法。
参数分析 参数 代表方法执行期间接收的外部数据，可以是任意数据类型。比如int类型，String类型，以及自己定义的类型。
参数的传递  值传递：方法内部对参数进行了改变，如果原始变量不变就是值传递（传递八大基本类型和String类型）。 引用传递：方法内部对参数进行了改变，如果原始变量的状态一并发生了变化，就是引用传递。  除了值传递之外的参数传递都是引用传递。</description>
    </item>
    
    <item>
      <title>Markdown笔记(二)</title>
      <link>https://orilx.gitee.io/p/2021/02/markdown%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Tue, 16 Feb 2021 20:41:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/02/markdown%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;六列表&#34;&gt;六、列表&lt;/h2&gt;
&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;
&lt;p&gt;无序列表使用星号 &lt;code&gt;*&lt;/code&gt; 、加号 &lt;code&gt;+&lt;/code&gt; 或是减号 &lt;code&gt;-&lt;/code&gt; 作为列表标记，这些标记后面要添加一个空格，然后再填写内容：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown笔记(一)</title>
      <link>https://orilx.gitee.io/p/2021/02/markdown%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Tue, 16 Feb 2021 16:41:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/02/markdown%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。由约翰·格鲁伯（英语：John Gruber）创建。
Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。
Markdown 编写的文档后缀为 .md 或.markdown。 ——菜鸟教程
 一、标题 1.1 使用#号标记 使用#号进行标题分级，注意#号后面要有一个空格。一个#号代表一级标题，两个代表二级，以此类推。
▼下面是实例
1 2 3 4 5 6  # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题   效果：1.2 使用 = 和 - 标记一级和二级标题 ▼下面是实例
1 2 3 4  一级标题 ====== 二级标题 -----   效果：二、段落格式 2.1 段落 在markdown中换行，需要在行末加上两个以上的空格
▼或者在两行之间空一行表示重新开始一个段落
1 2 3  text text   效果：text</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://orilx.gitee.io/p/2021/02/hello-world/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/2021/02/hello-world/</guid>
      <description>2021-03-18更新
给电脑重装了系统
hexo博客又崩了
花了两天时间迁移到hugo上
2021-02-14
折腾了一整天，终于把这个博客配置的差不多了
剩下的细节以后再搞吧 (._. )&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://orilx.gitee.io/p/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://orilx.gitee.io/p/1/01/</guid>
      <description>静态页面生成器
docsify/gitbook 文档适用</description>
    </item>
    
  </channel>
</rss>
